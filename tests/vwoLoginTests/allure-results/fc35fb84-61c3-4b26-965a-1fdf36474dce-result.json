{"name": "vwo_log_in_positive", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.JavascriptException: Message: javascript error: {\"status\":32,\"value\":\"Unable to locate an element with the xpath expression //span[@data-qa='lufexuloga' because of the following error:\\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '//span[@data-qa='lufexuloga'' is not a valid XPath expression.\"}\n  (Session info: chrome=124.0.6367.209)\nStacktrace:\n\tGetHandleVerifier [0x00007FF726101522+60802]\n\t(No symbol) [0x00007FF72607AC22]\n\t(No symbol) [0x00007FF725F37CE4]\n\t(No symbol) [0x00007FF725F3DE26]\n\t(No symbol) [0x00007FF725F401DB]\n\t(No symbol) [0x00007FF725F40280]\n\t(No symbol) [0x00007FF725F86A11]\n\t(No symbol) [0x00007FF725F86E1C]\n\t(No symbol) [0x00007FF725FCCE37]\n\t(No symbol) [0x00007FF725FAABBF]\n\t(No symbol) [0x00007FF725FCA224]\n\t(No symbol) [0x00007FF725FAA923]\n\t(No symbol) [0x00007FF725F78FEC]\n\t(No symbol) [0x00007FF725F79C21]\n\tGetHandleVerifier [0x00007FF7264041BD+3217949]\n\tGetHandleVerifier [0x00007FF726446157+3488183]\n\tGetHandleVerifier [0x00007FF72643F0DF+3459391]\n\tGetHandleVerifier [0x00007FF7261BB8E6+823622]\n\t(No symbol) [0x00007FF726085FBF]\n\t(No symbol) [0x00007FF726080EE4]\n\t(No symbol) [0x00007FF726081072]\n\t(No symbol) [0x00007FF7260718C4]\n\tBaseThreadInitThunk [0x00007FFBAB44257D+29]\n\tRtlUserThreadStart [0x00007FFBAC88AA48+40]", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7642ceeffd79bdc4d25f09d0775a5ee2\")>\n\n    @allure.title(\"vwo_log_in_positive\")\n    @allure.description(\"this for Vwo login positive test case\")\n    def test_vwo_log_in_positive(setup):\n        driver = setup\n        loginpage = LoginPage(driver)\n        loginpage.login_to_vwo(uid=\"python@one.com\", pwd=\"Admin@123\")\n        time.sleep(10)\n        dashboardpage = DashBoardPage(driver)\n        assert \"Dashboard\" in driver.title\n>       assert \"python\" in dashboardpage.dash_board_text()\n\ntest_vwo_login.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pageObjects\\dashboardPage.py:20: in dash_board_text\n    return self.get_user_log_in().text\n..\\pageObjects\\dashboardPage.py:15: in get_user_log_in\n    return self.driver.find_element(*DashBoardPage.user_log_in)\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000285834B6990>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: {\\\\\"status\\\\\":32,\\\\\"value\\...07FF7260718C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFBAB44257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFBAC88AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: {\"status\":32,\"value\":\"Unable to locate an element with the xpath expression //span[@data-qa='lufexuloga' because of the following error:\\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '//span[@data-qa='lufexuloga'' is not a valid XPath expression.\"}\nE         (Session info: chrome=124.0.6367.209)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF726101522+60802]\nE       \t(No symbol) [0x00007FF72607AC22]\nE       \t(No symbol) [0x00007FF725F37CE4]\nE       \t(No symbol) [0x00007FF725F3DE26]\nE       \t(No symbol) [0x00007FF725F401DB]\nE       \t(No symbol) [0x00007FF725F40280]\nE       \t(No symbol) [0x00007FF725F86A11]\nE       \t(No symbol) [0x00007FF725F86E1C]\nE       \t(No symbol) [0x00007FF725FCCE37]\nE       \t(No symbol) [0x00007FF725FAABBF]\nE       \t(No symbol) [0x00007FF725FCA224]\nE       \t(No symbol) [0x00007FF725FAA923]\nE       \t(No symbol) [0x00007FF725F78FEC]\nE       \t(No symbol) [0x00007FF725F79C21]\nE       \tGetHandleVerifier [0x00007FF7264041BD+3217949]\nE       \tGetHandleVerifier [0x00007FF726446157+3488183]\nE       \tGetHandleVerifier [0x00007FF72643F0DF+3459391]\nE       \tGetHandleVerifier [0x00007FF7261BB8E6+823622]\nE       \t(No symbol) [0x00007FF726085FBF]\nE       \t(No symbol) [0x00007FF726080EE4]\nE       \t(No symbol) [0x00007FF726081072]\nE       \t(No symbol) [0x00007FF7260718C4]\nE       \tBaseThreadInitThunk [0x00007FFBAB44257D+29]\nE       \tRtlUserThreadStart [0x00007FFBAC88AA48+40]\n\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: JavascriptException"}, "description": "this for Vwo login positive test case", "start": 1715951620974, "stop": 1715951631291, "uuid": "6adfa7f3-5419-4404-a714-049c5cd7698f", "historyId": "ffb7fedb6056d0e52da8d46db2a5aa29", "testCaseId": "ffb7fedb6056d0e52da8d46db2a5aa29", "fullName": "tests.vwoLoginTests.test_vwo_login#test_vwo_log_in_positive", "labels": [{"name": "parentSuite", "value": "tests.vwoLoginTests"}, {"name": "suite", "value": "test_vwo_login"}, {"name": "host", "value": "INBook_X1"}, {"name": "thread", "value": "10468-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.vwoLoginTests.test_vwo_login"}]}